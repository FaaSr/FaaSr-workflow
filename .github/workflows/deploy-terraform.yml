name: Deploy FaaSr with Terraform

on:
  workflow_dispatch:
    inputs:
      workflow_file:
        description: 'Workflow JSON file name'
        required: true
        type: string
        default: 'project1.json'
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options:
          - 'plan'
          - 'apply'
          - 'destroy'
        default: 'plan'
      auto_approve:
        description: 'Auto-approve changes (skip confirmation)'
        required: false
        type: boolean
        default: false
  
  # Optional: Trigger on pushes to specific files
  push:
    paths:
      - 'project*.json'
      - 'terraform/**'
    branches:
      - main
  
  # Optional: Trigger on pull requests for planning
  pull_request:
    paths:
      - 'project*.json'
      - 'terraform/**'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan') || github.event_name == 'push'
    
    outputs:
      plan-output: ${{ steps.plan.outputs.stdout }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7.0
          terraform_wrapper: false

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 PyGithub

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}

      - name: Determine workflow file
        id: workflow
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "file=${{ github.event.inputs.workflow_file }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect changed JSON files or use default
            CHANGED_JSON=$(git diff --name-only HEAD~1 HEAD | grep '\.json$' | head -1)
            echo "file=${CHANGED_JSON:-project1.json}" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Plan
        id: plan
        env:
          PAT: ${{ secrets.PAT }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Planning deployment for workflow file: ${{ steps.workflow.outputs.file }}"
          python scripts/deploy_terraform.py \
            --workflow-file ${{ steps.workflow.outputs.file }} \
            --plan-only

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## Terraform Plan Results üöÄ
            
            **Workflow File:** \`${{ steps.workflow.outputs.file }}\`
            
            <details>
            <summary>Show Plan</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            **Next Steps:**
            - If this looks good, merge the PR to trigger deployment
            - Or use "Deploy FaaSr with Terraform" workflow with action "apply"
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    environment: production  # Require manual approval for applies
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7.0
          terraform_wrapper: false

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 PyGithub

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}

      - name: Terraform Apply
        env:
          PAT: ${{ secrets.PAT }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "Deploying workflow file: ${{ github.event.inputs.workflow_file }}"
          
          # Add auto-approve flag if requested
          AUTO_APPROVE=""
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            AUTO_APPROVE="--auto-approve"
            echo "‚ö†Ô∏è Auto-approve enabled - deployment will proceed without confirmation"
          fi
          
          python scripts/deploy_terraform.py \
            --workflow-file ${{ github.event.inputs.workflow_file }} \
            $AUTO_APPROVE

      - name: Upload Terraform State (if needed)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state
          path: terraform/terraform.tfstate*
          retention-days: 30

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: destruction  # Require manual approval for destruction
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7.0
          terraform_wrapper: false

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 PyGithub

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}

      - name: Terraform Destroy
        env:
          PAT: ${{ secrets.PAT }}
          AWS_LAMBDA_ROLE_ARN: ${{ secrets.AWS_LAMBDA_ROLE_ARN }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          echo "üî• DESTROYING infrastructure for workflow file: ${{ github.event.inputs.workflow_file }}"
          echo "This will DELETE all AWS Lambda functions and GitHub workflows!"
          
          # Add auto-approve flag if requested
          AUTO_APPROVE=""
          if [ "${{ github.event.inputs.auto_approve }}" = "true" ]; then
            AUTO_APPROVE="--auto-approve"
            echo "‚ö†Ô∏è Auto-approve enabled - destruction will proceed without confirmation"
          fi
          
          python scripts/deploy_terraform.py \
            --workflow-file ${{ github.event.inputs.workflow_file }} \
            --destroy \
            $AUTO_APPROVE

  # Fallback job for OpenWhisk deployments
  openwhisk-deployment:
    name: OpenWhisk Deployment (Fallback)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    needs: terraform-apply
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 PyGithub
          # Install OpenWhisk CLI
          curl -L https://github.com/apache/openwhisk-cli/releases/download/1.2.0/OpenWhisk_CLI-1.2.0-linux-amd64.tgz | tar xz
          sudo mv wsk /usr/local/bin/
          sudo chmod +x /usr/local/bin/wsk

      - name: Deploy OpenWhisk Functions
        env:
          PAT: ${{ secrets.PAT }}
        run: |
          # Configure wsk with default guest auth
          wsk property set --auth 23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP
          
          # Check if workflow has OpenWhisk functions
          if python -c "
          import json
          with open('${{ github.event.inputs.workflow_file }}', 'r') as f:
              data = json.load(f)
          
          has_ow = any(
              data['ComputeServers'][func['FaaSServer']]['FaaSType'].lower() == 'openwhisk'
              for func in data['FunctionList'].values()
          )
          exit(0 if has_ow else 1)
          "; then
            echo "OpenWhisk functions detected, deploying..."
            python scripts/deploy_functions.py --workflow-file ${{ github.event.inputs.workflow_file }}
          else
            echo "No OpenWhisk functions found, skipping OpenWhisk deployment"
          fi 